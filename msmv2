#!/usr/bin/env bash

###################################
##                               ##
##   Copyright Ben McAvoy, 2024  ##
##   <ben.mcavoy@tutanota.com>   ##
##                               ##
###################################
##                               ##
##   Licensed under MIT. Used    ##
##   Used for automatically      ##
##	 setting up servers and      ##
##   configuring the proxy.      ##
##                               ##
###################################

set -e

# USAGE: msmv2 subcommand [args]
# Subcommands:
#  new <name> <kind> - Create a server with the given name and kind (e.g. paper)
#  start - Start all servers
#  restart - Restart all servers

### STARTUP ###

# Check for tmux msm_console session being absent
if ! tmux list-sessions -F "#{session_name}" | grep -q msm_console; then
	if [ -f /tmp/msm_ports ]; then
		rm /tmp/msm_ports
	fi
fi

### JAVA FLAGS ###
SERVER_FLAGS="-Xms4G -Xmx4G -XX:+UseG1GC -XX:+ParallelRefProcEnabled -XX:MaxGCPauseMillis=200 -XX:+UnlockExperimentalVMOptions -XX:+DisableExplicitGC -XX:+AlwaysPreTouch -XX:G1HeapWastePercent=5 -XX:G1MixedGCCountTarget=4 -XX:InitiatingHeapOccupancyPercent=15 -XX:G1MixedGCLiveThresholdPercent=90 -XX:G1RSetUpdatingPauseTimePercent=5 -XX:SurvivorRatio=32 -XX:+PerfDisableSharedMem -XX:MaxTenuringThreshold=1 -Dusing.aikars.flags=https://mcflags.emc.gs -Daikars.new.flags=true -XX:G1NewSizePercent=30 -XX:G1MaxNewSizePercent=40 -XX:G1HeapRegionSize=8M -XX:G1ReservePercent=20"
PROXY_FLAGS="-Xms4G -Xmx4G -XX:+UseG1GC -XX:G1HeapRegionSize=4M -XX:+UnlockExperimentalVMOptions -XX:+ParallelRefProcEnabled -XX:+AlwaysPreTouch -XX:MaxInlineLevel=15"

### LAUNCHERS ###
SERVER_LAUNCHER="while true; do java $SERVER_FLAGS -jar server.jar --nogui; echo Server crashed, restarting in 10 seconds...; sleep 10; done"
PROXY_LAUNCHER="while true; do java $PROXY_FLAGS -jar server.jar; echo Server crashed, restarting in 10 seconds...; sleep 10; done"

### CONSTANTS ###
AUTO_ACCEPT_EULA=true
LOWEST_PORT=25566

### VARIABLES ###
if [ -f /tmp/msm_ports ]; then
	source /tmp/msm_ports
else
	ports=()
fi

### TMUX SESSIONS ###
if ! tmux list-sessions -F "#{session_name}" | grep -q msm_bootstrap; then
	tmux new-session -d -s msm_bootstrap
fi

### FUNCTIONS ###
function clear_proxy() {
	sed -i '/\[servers\]/,/try/ {//!d}' ./servers/proxy/velocity.toml
}

# Usage: add_server_to_proxy <name> <port>
function add_server_to_proxy() {
	IP="127.0.0.1:$2"
	STRING="$1 = \"$IP\""

	sed -i "/\[servers\]/a $STRING" ./servers/proxy/velocity.toml
}

# Usage: configure_server <name> <port> [bootstrap]
function configure_server() {
	# Whether or not to bootstrap the server
	local bootstrap="${3:-false}"

	local name=$1
	local port=$2

	local dir="./servers/$name"

	if [ "$name" == "proxy" ]; then
		if [ "$bootstrap" = "true" ]; then
			echo "Bootstrapping proxy..."

			tmux send-keys -t "msm_bootstrap" "(cd $dir && java -jar server.jar); tmux wait -S msm_bootstrap" Enter
			tmux send-keys -t "msm_bootstrap" "stop" Enter
			tmux wait "msm_bootstrap"

			sed -i "s/25577/$port/g" "$dir/velocity.toml"
			sed -i '/\[forced-hosts\]/,/\[advanced\]/ {//!d}' "$dir/velocity.toml"
		fi

		return
	fi

	if [ "$bootstrap" = "true" ]; then
		echo "Bootstrapping $name..."

		tmux send-keys -t "msm_bootstrap" "(cd $dir && java -jar server.jar --nogui); tmux wait -S msm_bootstrap" Enter
		tmux wait "msm_bootstrap"

		sed -i "s/online-mode=true/online-mode=false/g" "$dir/server.properties"
		sed -i "s/enforce-secure-profile=true/enforce-secure-profile=false/g" "$dir/server.properties"
	fi

	if $AUTO_ACCEPT_EULA; then
		if grep -q "eula=false" "$dir/eula.txt"; then
			echo "eula=true" > "$dir/eula.txt"
		fi
	fi

	sed -i "s/server-port=.*/server-port=$port/g" "$dir/server.properties"
}

# Usage: create_server <name> <kind>
function create_server() {
	local name=$1
	local kind=$2

	# Create the server
	mkdir -p "./servers/$name"

	case $kind in
		"velocity")
			# set +x
			RELEASE_JSON=$(curl -s https://api.papermc.io/v2/projects/velocity/)
			RELEASE=$(echo "$RELEASE_JSON" | jq -r '.versions[-1]')

			BUILD_JSON=$(curl -s "https://api.papermc.io/v2/projects/velocity/versions/$RELEASE/builds/")
			BUILD=$(echo "$BUILD_JSON" | jq -r '.builds[-1].build')
			# set -x

			URL="https://api.papermc.io/v2/projects/velocity/versions/$RELEASE/builds/$BUILD/downloads/velocity-$RELEASE-$BUILD.jar"

			wget -O "./servers/$name/server.jar" "$URL"
			;;
		"paper")
			# set +x
			VERSION_JSON=$(curl -s https://papermc.io/api/v2/projects/paper/)
			VERSION=$(echo "$VERSION_JSON" | jq -r '.versions[-1]')
			BUILD_JSON=$(curl -s "https://papermc.io/api/v2/projects/paper/versions/$VERSION/")
			BUILD=$(echo "$BUILD_JSON" | jq -r '.builds[-1]')
			# set -x

			wget "https://papermc.io/api/v2/projects/paper/versions/$VERSION/builds/$BUILD/downloads/paper-$VERSION-$BUILD.jar" -O "./servers/$name/server.jar"
			;;
		"fabric")
			# set +x
			JSON=$(curl -s https://meta.fabricmc.net/v2/versions/)

			GAME=$(echo "$JSON" | jq -r ".game | map(select(.stable == true))[0].version")
			LOADER=$(echo "$JSON" | jq -r ".loader | map(select(.stable == true))[0].version")
			INSTALLER=$(echo "$JSON" | jq -r ".installer | map(select(.stable == true))[0].version")
			# set -x

			wget "https://meta.fabricmc.net/v2/versions/loader/$GAME/$LOADER/$INSTALLER/server/jar" -O "./servers/$name/server.jar"
			;;
		*)
			echo "Invalid server type"
			exit 1
			;;
	esac
}

function increment_port() {
	if [ -z "$ports" ]; then
		echo "No server ports found, starting at $LOWEST_PORT"
		ports+=("$LOWEST_PORT")
	else
		echo "Incrementing port from ${ports[-1]}"
		ports+=($((${ports[-1]} + 1)))
	fi
}

### CLI ###
# Usage: msmv2 new <name> <kind>
if [ "$1" == "new" ]; then
	if [ -z "$2" ] || [ -z "$3" ]; then
		echo "Usage: msmv2 new <name> <kind>"
		exit 1
	fi

	increment_port
	echo "Creating $3 server $2 with port ${ports[-1]}"

	create_server "$2" "$3"
	configure_server "$2" "${ports[-1]}" true

	add_server_to_proxy "$2" "${ports[-1]}"

	# Send Ctrl+A, Ctrl+K to `msm_console` `proxy` window
	tmux send-keys -t "msm_console:proxy" C-a C-k
	tmux send-keys -t "msm_console:proxy" "velocity reload" Enter

	tmux new-window -n "$2" -c "./servers/$2" "$SERVER_LAUNCHER"

	declare -p ports > /tmp/msm_ports

	exit 0
fi

# Create the proxy
if [ ! -d "./servers/proxy/" ]; then
	create_server proxy velocity
	configure_server proxy 25565 true
fi

if [ ! -d "./servers/lobby" ]; then
	create_server lobby paper
fi

clear_proxy

if ! tmux list-sessions -F "#{session_name}" | grep -q msm_console; then
	echo "MSM CONSOLE STARTING"
	tmux new-session -d -s msm_console
fi

for server in ./servers/*; do
	if [ ! -d "./servers/$server" ]; then
		name=$(basename "$server")

		bootstrap=false
		if [ "$(basename "$server")" != "proxy" ]; then
			increment_port

			if [ ! -f "$server/server.properties" ]; then
				bootstrap=true
			fi

			echo "Configuring $server... with port ${ports[-1]}. Bootstrap: $bootstrap"
			configure_server "$name" "${ports[-1]}" "$bootstrap"
			add_server_to_proxy "$name" "${ports[-1]}"

			tmux new-window -n "$name" -c "$server" "$SERVER_LAUNCHER"
		fi
	fi
done

declare -p ports > /tmp/msm_ports

tmux new-window -n "proxy" -c "./servers/proxy" "$PROXY_LAUNCHER"

tmux attach-session -t msm_console
